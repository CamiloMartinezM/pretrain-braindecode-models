[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"
# requires = ["flit_core >=3.2,<4"]
# build-backend = "flit_core.buildapi"

[project]
name = "pretrain_braindecode_models"
version = "0.0.1"
description = "Pretraining braindecode models with EEG datasets"
authors = [{ name = "Camilo MartÃ­nez M.", email = "cama00005@stud.uni-saarland.de" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
]
requires-python = ">=3.10"

[tool.setuptools.packages.find]
where = ["."] # Look for packages in the current directory (project root)
# Optionally include/exclude specific top-level directories if needed
include = ["pretrain_braindecode_models*"] # Include only specific directories
exclude = [
    "data*",
    "tests*",
    "docs*",
    "models*",
    "notebooks*",
    "references*",
    "reports*",
] # Exclude non-code directories

[tool.ruff]
line-length = 99
target-version = "py312"

[tool.ruff.lint]
select = [
    "ALL", # include all the rules, including new ones
]
ignore = [
    "D413",
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "SIM108",  # Use ternary operator `prev_timestamp = value[-1] if isinstance(value, list) else value` instead of `if`-`else`-block
    "PLR5501", # Use `elif` instead of `else` then `if`, to reduce indentation
    "ERA001",  # Found commented-out code
    "T201",    # `print` found
    "BLE001",  # Do not catch blind exception: `Exception`
    "C901",    # function is too complex (13 > 10)
    "PLR0912", # Too many branches (13 > 12)
    "UP031",   # Use format specifiers instead of percent format
    "EM101",   # Exception must not use a string literal, assign to variable first
    "PLR0913", # Too many arguments in function definition (6 > 5)
    "PLR0915", # Too many statements (65 > 50)
    "TRY301",  # Abstract `raise` to an inner function
    "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
    "N803",    # Argument name should be lowercase
    "N806",    # Variable name should be lowercase
    "COM812",  # Trailing comma missing
    "ANN003",  # Missing type annotation for `**kwargs`
    "B006",    # Do not use mutable data structures for argument defaults
    "PD901",   # Avoid using the generic variable name `df` for DataFrames
]

[tool.ruff.format]

# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# The following libraries don't have type stubs, so we ignore them in mypy checks.
[tool.mypy]
[[tool.mypy.overrides]]
module = "sklearn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mne.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "moviepy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "skorch.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "braindecode.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "scienceplots.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytorch3d.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pyrender.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "adjustText.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "cyclopts.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "lightning.pytorch.callbacks.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "torcheeg.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mpl_toolkits.*"
ignore_missing_imports = true
